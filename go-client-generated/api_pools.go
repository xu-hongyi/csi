
/*
 * ET-GDS
 *
 * ET-GDS API doc.
 *
 * API version: ET-GDS API 7.1.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type PoolsApiService service

/*
PoolsApiService 存储池列表
存储池列表
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *PoolsApiApiV1PoolsGetOpts - Optional Parameters:
     * @param "Index" (optional.Int32) -  数据分页时，当前页允许返回的条目数
     * @param "Offset" (optional.Int32) -  分页查询的偏移量
     * @param "SortBy" (optional.String) -  若返回的列表数据需要排序，则以该字段来排序
     * @param "OrderBy" (optional.String) -  排序的方式，升序或者降序
     * @param "Name" (optional.String) -  根据存储池名称进行过滤
     * @param "Application" (optional.String) -  根据存储池用途进行过滤
     * @param "FailureDomainName" (optional.String) -  根据物理池名称进行过滤
     * @param "SafeLevel" (optional.String) -  根据存储池的安全级别进行过滤
     * @param "HealthStatus" (optional.String) -  根据资源的健康状态进行过滤
     * @param "RedundancyPloy" (optional.String) -  根据冗余策略进行过滤
     * @param "FailureDomainId" (optional.String) -  根据物理吃uuid进行过滤

@return ListPoolResponseView
*/

type PoolsApiApiV1PoolsGetOpts struct { 
	Index optional.Int32
	Offset optional.Int32
	SortBy optional.String
	OrderBy optional.String
	Name optional.String
	Application optional.String
	FailureDomainName optional.String
	SafeLevel optional.String
	HealthStatus optional.String
	RedundancyPloy optional.String
	FailureDomainId optional.String
}

func (a *PoolsApiService) ApiV1PoolsGet(ctx context.Context, localVarOptionals *PoolsApiApiV1PoolsGetOpts) (ListPoolResponseView, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ListPoolResponseView
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/pools"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Index.IsSet() {
		localVarQueryParams.Add("index", parameterToString(localVarOptionals.Index.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortBy.IsSet() {
		localVarQueryParams.Add("sort_by", parameterToString(localVarOptionals.SortBy.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OrderBy.IsSet() {
		localVarQueryParams.Add("order_by", parameterToString(localVarOptionals.OrderBy.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Application.IsSet() {
		localVarQueryParams.Add("application", parameterToString(localVarOptionals.Application.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FailureDomainName.IsSet() {
		localVarQueryParams.Add("failure_domain_name", parameterToString(localVarOptionals.FailureDomainName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SafeLevel.IsSet() {
		localVarQueryParams.Add("safe_level", parameterToString(localVarOptionals.SafeLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.HealthStatus.IsSet() {
		localVarQueryParams.Add("health_status", parameterToString(localVarOptionals.HealthStatus.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RedundancyPloy.IsSet() {
		localVarQueryParams.Add("redundancy_ploy", parameterToString(localVarOptionals.RedundancyPloy.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FailureDomainId.IsSet() {
		localVarQueryParams.Add("failure_domain_id", parameterToString(localVarOptionals.FailureDomainId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/json;charset=UTF-8"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ListPoolResponseView
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v Common400ResponseView
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 401 {
			var v Common401ResponseView
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v Common500ResponseView
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

